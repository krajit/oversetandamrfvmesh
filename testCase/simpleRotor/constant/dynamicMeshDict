/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1806                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      dynamicMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dynamicFvMesh       oversetAndAMRFvMesh; 
//dynamicFvMesh       dynamicOversetFvMesh;

oversetAndAMRFvMeshCoeffs
{
nBufferLayersR 2;

// How often to refine
refineInterval  1;

// Field to be refinement on
field           refinementField; //cellMask;
//field   cellMask;


// Refine field inbetween lower..upper
lowerRefineLevel 0.5; //0.001;
upperRefineLevel 1.5; //0.999;

// If value < unrefineLevel unrefine
unrefineLevel   10;

// Have slower than 2:1 refinement
nBufferLayers   15;

// Refine cells only up to maxRefinement levels
maxRefinement   1;

// Stop refinement if maxCells reached
maxCells        200000;

// Flux field and corresponding velocity field. Fluxes on changed
// faces get recalculated by interpolating the velocity. Use 'none'
// on surfaceScalarFields that do not need to be reinterpolated.
correctFluxes
(
//    (phi U)
//    (nHatf none)
//    (rhoPhi none)
//    (alphaPhi0.water none)
//    (ghf none)
);

// Write the refinement level as a volScalarField
dumpLevel       true;

}


solver          multiSolidBodyMotionSolver;

multiSolidBodyMotionSolverCoeffs
{
    movingZone
    {
        solidBodyMotionFunction rotatingMotion;
        rotatingMotionCoeffs
        {
            origin      (0.005 0.005 0.005);
            axis        (0 0 1);
            omega       100.0;
        }
    }
}

// ************************************************************************* //
